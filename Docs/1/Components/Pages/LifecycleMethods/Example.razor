@page "/LifecycleMethods"

@using Components.Models

@inject HttpClient Http

<h3>Example</h3>

<button @onclick="@GetForecastsAsync">Get Forecasts</button>

@if (forecasts == null)
{
    <h4>Waiting ...</h4>
}
else
{
    <h4>Forecasts Count: @forecasts.Count()</h4>
}

@code {

WeatherForecast[] forecasts;

protected override void OnInitialized()
{
    base.OnInitialized();

    Console.WriteLine("OnInitialized");
}

protected override async Task OnInitializedAsync()
{
    await base.OnInitializedAsync();

    Console.WriteLine("OnInitAsync");
}

protected override void OnParametersSet()
{
    base.OnParametersSetAsync();

    Console.WriteLine("OnParametersSetAsync");
}

protected override async Task OnParametersSetAsync()
{
    await base.OnParametersSetAsync();

    Console.WriteLine("OnParametersSet");
}

protected override void OnAfterRender(bool firstRender)
{
    base.OnAfterRender(firstRender);

    Console.WriteLine("OnAfterRender");
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    await base.OnAfterRenderAsync(firstRender);

    Console.WriteLine("OnAfterRenderAsync");
}

public override Task SetParametersAsync(ParameterView parameters)
{
    Console.WriteLine("SetParametersAsync");

    return base.SetParametersAsync(parameters);
}

protected override bool ShouldRender()
{
    Console.WriteLine("ShouldRender ;)");

    return base.ShouldRender();
}

private async Task GetForecastsAsync()
{
    forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
}
}
