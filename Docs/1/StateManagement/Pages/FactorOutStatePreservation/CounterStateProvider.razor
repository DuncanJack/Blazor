@using Microsoft.AspNetCore.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore

<h3>CounterStateProvider</h3>

@if(!hasLoaded)
{
    <p>CounterStateProvider is Loading ...</p>
}
 else
{
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>
}


@code {
    private bool hasLoaded;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public int CurrentCount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // When execution reaches this point, the first *interactive* render is complete.
            // The component has an active connection to the browser.
            CurrentCount = await ProtectedSessionStore.GetAsync<int>("count");
            hasLoaded = true;
            StateHasChanged();
        }

    }

    public async Task SaveChangesAsync()
    {
        await ProtectedSessionStore.SetAsync("count", CurrentCount);
    }

}